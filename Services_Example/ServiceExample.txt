// To add a Service to your app, include this Service file in your app's package
package Services_Crawler

import (
	. "Framework_Definitions"
	"JSON_Saver"
	. "Utilities"
	"github.com/kardianos/osext"
)

// ------------------------------------------- Public ------------------------------------------- //

// Define your service as a struct.
// The struct MUST implement the Init() and RunFunction() methods. See below.
// The struct can include any extra fields (and methods) you need.

type CrawlerService struct {
	path     string
	websites []string
}

// Every Service struct MUST implement the < (*ServiceName) Init() string > and the < (*ServiceName) RunFunction(Event, chan Event) Event > methods.
// The Init() method MUST return the name of the service as a string.

func (s *CrawlerService) Init() string {
	path, err := osext.ExecutableFolder()
	CheckError(err)

	err = JSONSaver.Load(path+"\\websites.JSON", &s.websites)
	CheckError(err)

	return "CrawlerService"
}


// ------------------------------------------- ----- ------------------------------------------- //
// When implementing the RunFuction() method, keep the following in mind:
// 1. The RunFunction() is called every time an even is posted to the service. It should include appropriate responses to all *relevent* Event types.
// 2. The RunFunction() will be called every time an Event is posted to the Service. Do NOT use blocking code.
// 2b. If you have blocking subroutines, run them in their own goroutines.
// 3. RunFunction() returns an Event, which gets posted to all other Services in the Framework. To post extra events, send them on sendChannel.
// ------------------------------------------- ----- ------------------------------------------- //





func (s *CrawlerService) RunFunction(event Event, sendChannel chan Event) Event {
	// fmt.Println("Entering Crawler Service Run Function...")
	returnEvent := NewEvent(NONE, "", "")

	switch event.Type {

	case GLOBAL_START:

	case GLOBAL_EXIT:
		returnEvent = NewEvent(FINISHED, "", "")

	case REQUEST_WEBSITE_LIST:
		go s.blockingMethod()

	case REQUEST_USER_INPUT:

	default:

	}

	// fmt.Println("Exiting Crawler service")
	return returnEvent
}

// ------------------------------------------- Private ------------------------------------------- //

// You are free to include any other methods as you see fit.

// func (s *CrawlerService) customMethod() {
// 	}
//

// func (s *CrawlerService) blockingMethod() {
}


// ------------------------------------------- ----- ------------------------------------------- //
// See Services.txt and FrameWorkDefinitions.go for more details.
// ------------------------------------------- ----- ------------------------------------------- //
